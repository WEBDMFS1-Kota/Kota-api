generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model projectTag {
  id        Int       @id @default(autoincrement())
  tagId     Int?
  projectId Int?
  projects  projects? @relation(fields: [projectId], references: [id], onDelete: Cascade)
  tags      tags?     @relation(fields: [tagId], references: [id], onDelete: Cascade)
}

model userTag {
  id     Int    @id @default(autoincrement())
  userId Int?
  tagId  Int?
  tags   tags?  @relation(fields: [tagId], references: [id], onDelete: Cascade)
  users  users? @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model projects {
  id               Int             @id @default(autoincrement())
  title            String?         @db.VarChar
  projectUrl       String?         @db.VarChar
  shortDescription String?         @db.VarChar
  description      String?         @db.VarChar
  publishDate      DateTime?       @db.Timestamp(6)
  image            String?         @db.VarChar
  upVote           Int?
  downVote         Int?
  projectTag       projectTag[]
  projectsUsers    projectsUsers[]
  usersVotes       usersVotes[]
}

model projectsUsers {
  id        Int       @id @default(autoincrement())
  userId    Int?
  projectId Int?
  projects  projects? @relation(fields: [projectId], references: [id], onDelete: Cascade)
  users     users?    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model tags {
  id         Int          @id @default(autoincrement())
  name       String?      @db.VarChar
  projectTag projectTag[]
  userTag    userTag[]
}

model users {
  id               Int             @id @default(autoincrement())
  pseudo           String?         @unique @db.VarChar
  avatar           String?         @db.VarChar
  firstname        String?         @db.VarChar
  lastname         String?         @db.VarChar
  password         String?         @db.VarChar
  email            String?         @unique @db.VarChar
  birthDate        DateTime?       @db.Date
  description      String?         @db.VarChar
  githubProfileURL String?         @db.VarChar
  projectsUsers    projectsUsers[]
  userTag          userTag[]
  usersVotes       usersVotes[]
}

model usersVotes {
  id        Int       @id @default(autoincrement())
  userId    Int?
  projectId Int?
  voteValue Int?
  projects  projects? @relation(fields: [projectId], references: [id], onDelete: Cascade)
  users     users?    @relation(fields: [userId], references: [id], onDelete: Cascade)
}
